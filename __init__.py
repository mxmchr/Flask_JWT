from flask import Flask, render_template, jsonify, request, redirect, make_response
from datetime import timedelta
from flask_jwt_extended import (
    create_access_token,
    decode_token,
    get_jwt_identity,
    JWTManager
)

app = Flask(__name__)

# Configuration du module JWT
app.config["JWT_SECRET_KEY"] = "Ma_cl√©_secrete"  # Cl√© secr√®te
app.config["JWT_ACCESS_TOKEN_EXPIRES"] = timedelta(minutes=60)  # Expiration du token
jwt = JWTManager(app)

@app.route('/')
def home():
    return redirect("/login")  # Redirige vers le formulaire de connexion

# üîπ Route pour afficher le formulaire de connexion
@app.route("/login", methods=["GET"])
def login_form():
    return render_template("login.html")

# üîπ Route pour g√©rer l'authentification et stocker le token dans un cookie
@app.route("/login", methods=["POST"])
def login():
    username = request.form.get("username")
    password = request.form.get("password")

    # Simulation d'une base de donn√©es
    users = {
        "test": {"password": "test", "role": "user"},
        "admin": {"password": "admin", "role": "admin"},
    }

    user = users.get(username)

    if not user or user["password"] != password:
        return jsonify({"msg": "Mauvais utilisateur ou mot de passe"}), 401

    # Cr√©ation du token JWT avec le r√¥le
    access_token = create_access_token(identity=username, additional_claims={"role": user["role"]})

    # Cr√©ation de la r√©ponse avec le cookie contenant le JWT
    response = make_response(redirect("/protected"))
    response.set_cookie("access_token", access_token, httponly=True)  # Stocke le JWT en cookie HTTPOnly

    return response

# üîπ Route prot√©g√©e accessible via le JWT stock√© dans un cookie
@app.route("/protected", methods=["GET"])
def protected():
    token = request.cookies.get("access_token")

    if not token:
        return jsonify({"msg": "Acc√®s refus√©", "error": "Token manquant"}), 401

    try:
        decoded_token = decode_token(token)  # D√©codage manuel du token JWT
        current_user = decoded_token["sub"]  # L'identit√© est stock√©e sous "sub"
        return jsonify({"msg": "Acc√®s autoris√©", "user": current_user}), 200
    except Exception as e:
        return jsonify({"msg": "Acc√®s refus√©", "error": str(e)}), 403

if __name__ == "__main__":
    app.run(debug=True)
